from PIL import Image
import numpy as np
from tensorflow.keras.models import load_model  # type: ignore
from tensorflow.keras.preprocessing.image import img_to_array  # type: ignore
from typing import Optional, Tuple, List

def convert_and_scale_values(values_str: str) -> np.ndarray:
    """
    Convert a string of space-separated values into a scaled and normalized 23x23 numpy array.

    Args:
    values_str (str): The input string containing space-separated values.

    Returns:
    np.ndarray: A 23x23 numpy array of the processed values.
    """
    elements: np.ndarray = np.fromstring(values_str, sep=' ')
    min_val: float = elements.min()
    # Shift values if the minimum is less than or equal to 0
    shift: float = 1 - min_val if min_val <= 0 else 0
    shifted_values: np.ndarray = elements + shift
    # Compress values using logarithm
    compressed_values: np.ndarray = np.log1p(shifted_values)
    # Normalize values to the 0-255 range
    min_val, max_val = compressed_values.min(), compressed_values.max()
    normalized_values: np.ndarray = np.uint8(
        255 * (compressed_values - min_val) / (max_val - min_val) if max_val > min_val else np.full_like(compressed_values, 128))
    # Ensure the array is of size 529 (23x23) and reshape
    return np.pad(normalized_values, (0, max(0, 529 - normalized_values.size)), 'constant')[:529].reshape((23, 23))

def process_data(packet_data: str) -> None:
    """Process a single packet data string and save it as an image in the database."""
    image_data: np.ndarray = convert_and_scale_values(packet_data)
    img: Image = Image.fromarray(image_data, 'L')
    return img

def prepare_test_data(img) -> np.ndarray:
    img = img.resize((32, 32))
    
    # Convert image to RGB if it's not
    if img.mode != 'RGB':
        img = img.convert('RGB')
    
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    img_array = img_array / 255.0  # Normalize
    return img_array

def classify_image(model, img_array: np.ndarray) -> dict:
    # Perform predictions on the image
    predictions = model.predict(img_array)
    prediction = predictions.flatten()[0]

    result = {
        'predicted_value': prediction,
        'prediction_result': 'Abnormal' if prediction > 0.9 else 'Normal'
    }

    return result

def main() -> None:
    model_path = "models/model-006.keras"
    model = load_model(model_path)

    #DDOS
    package = "0 0 141 -1 80 63713 2960 2920 64 0 5 0 -1 119 10 32 32 32 32 32 32 32 32 60 47 100 105 118 62 10 32 32 32 32 32 32 32 32 60 100 105 118 32 99 108 97 115 115 61 34 99 111 110 116 101 110 116 95 115 101 99 116 105 111 110 95 116 101 120 116 34 62 10 32 32 32 32 32 32 32 32 32 32 60 112 62 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 85 98 117 110 116 117 39 115 32 65 112 97 99 104 101 50 32 100 101 102 97 117 108 116 32 99 111 110 102 105 103 117 114 97 116 105 111 110 32 105 115 32 100 105 102 102 101 114 101 110 116 32 102 114 111 109 32 116 104 101 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 117 112 115 116 114 101 97 109 32 100 101 102 97 117 108 116 32 99 111 110 102 105 103 117 114 97 116 105 111 110 44 32 97 110 100 32 115 112 108 105 116 32 105 110 116 111 32 115 101 118 101 114 97 108 32 102 105 108 101 115 32 111 112 116 105 109 105 122 101 100 32 102 111 114 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 105 110 116 101 114 97 99 116 105 111 110 32 119 105 116 104 32 85 98 117 110 116 117 32 116 111 111 108 115 46 32 84 104 101 32 99 111 110 102 105 103 117 114 97 116 105 111 110 32 115 121 115 116 101 109 32 105 115 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 60 98 62 102 117 108 108 121 32 100 111 99 117 109 101 110 116 101 100 32 105 110 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 47 117 115 114 47 115 104 97 114 101 47 100 111 99 47 97 112 97 99 104 101 50 47 82 69 65 68 77 69 46 68 101 98 105 97 110 46 103 122 60 47 98 62 46 32 82 101 102 101 114 32 116 111 32 116 104 105 115 32 102 111 114 32 116 104 101 32 102 117 108 108 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 100 111 99 117 109 101 110 116 97 116 105 111 110 46 32 68 111 99 117 109 101 110 116 97 116 105 111 110 32 102 111 114 32 116 104 101 32 119 101 98"
    #Normal
    package = "1190 1582 3526815 -1 80 50095 1500 1460 118 0 5 0 -1 37 5 179 142 80 243 87 243 15 64 144 71 190 242 201 28 158 139 128 218 219 234 224 205 45 83 118 194 184 40 34 190 255 31 175 109 127 86 27 127 73 2 126 251 189 116 236 203 237 241 144 77 49 112 216 221 13 233 146 184 218 199 132 135 233 185 35 75 67 85 93 219 247 203 126 130 248 231 7 89 247 107 25 230 251 54 205 119 33 146 33 63 77 90 229 75 57 64 43 173 215 23 17 69 143 9 7 167 68 39 251 127 55 219 251 12 190 98 245 9 53 44 225 156 68 7 172 222 72 86 88 151 181 87 102 186 124 62 224 217 92 138 235 93 165 122 248 21 24 236 147 215 190 135 146 5 16 67 235 128 121 178 41 223 0 138 105 239 154 161 210 79 110 185 225 19 166 148 50 118 239 91 122 242 233 210 27 69 229 0 133 74 45 156 255 42 206 164 191 18 110 42 48 107 183 92 201 254 39 173 37 114 138 81 233 16 136 220 6 222 41 172 178 233 33 131 228 173 121 86 32 139 92 52 54 91 235 241 10 11 205 110 86 187 112 82 41 32 40 249 219 67 234 91 207 201 236 212 109 210 35 235 174 110 205 225 215 8 2 218 67 54 246 28 133 217 239 156 52 61 85 129 47 218 197 144 175 238 143 196 8 125 178 98 102 205 3 200 150 131 217 3 83 33 114 239 229 168 86 77 99 101 97 147 103 236 98 214 252 242 238 103 246 189 130 149 204 20 77 237 96 110 251 175 227 126 112 204 7 143 227 239 202 227 197 27 179 196 148 12 13 80 174 39 114 69 222 76 163 241 70 17 25 36 53 56 15 65 109 170 190 233 222 240 51 16 223 22 223 181 182 159 48 148 186 204 6 177 51 102 170 199 148 92 97 119 137 166 200 33 10 8 246 215 185 110 45 232 173 117 225 4 44 246 233 13 147 68 237 33 171 64 230 6 171 103 212 190 5 124 116 46 147 217 176 51 34 190 117 42 87 123 59 199 128 223 221 58 147 223 218 205 76 54 6 99 157 156 167 98 65 249 175 62 209 79 83 201 116 101 5 122 99 179 231 90 98 202 0 73 132 208 94 155 209 143 145 133 232 29 127 163 96 213 68 66 67 27 195 36"
    #DOS
    package = "30 202 271362 -1 110 17498 1500 1460 253 0 5 0 -1 65 65 65 65 65 65 65 65 10 65 65 65 65 65 65 68 65 65 65 66 52 65 65 65 65 65 65 65 65 65 65 65 65 65 77 81 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 10 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 80 69 65 113 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 74 48 65 65 65 65 65 65 78 85 65 10 65 65 65 65 65 65 65 65 65 65 65 65 119 81 65 65 65 74 119 65 65 65 65 65 65 65 65 65 53 65 65 65 65 65 65 65 65 65 65 65 47 103 66 54 65 65 65 65 65 65 65 65 65 65 65 65 55 111 103 65 10 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 72 111 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 76 119 65 65 65 67 105 65 65 65 65 65 80 77 65 10 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 57 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 10 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 67 55 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 115 119 65 65 65 65 65 65 65 65 65 65 10 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 48 103 65 65 65 65 65 65 65 65 65 65 65 78 77 65 65 65 65 65 65 65 65 65 65 65 67 72 65 65 65 65 10 109 81 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 67 82 65 65 65 65 53 103 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 10 55 119 65"
    #Reconnaissance
    package = "13 87 118689 -1 80 34338 1500 1460 253 0 5 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 69 0 0 153 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 129 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 174 0 0 0 0 187 0 0 0 115 0 0 0 0 0 0 0 0 0 0 0 179 187 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 186 186 0 0 0 0 0 0 0 0 0 0 0 0 0 231 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 244 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 70 144 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 132 0 0 0 227 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 242 0 151 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0 0 208 0 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 209 0 0 0 0 0 0 0 0 0 0"
    
    package: List[str] = package.split()
    if len(package) != 513:
        print("ntm")
        exit
    package: str = " ".join(package)
    img = process_data(package)
    img_array = prepare_test_data(img)
    result = classify_image(model, img_array)
    print(result)


if __name__ == '__main__':
    main()